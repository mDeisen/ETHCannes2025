/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticateSuccessRouteImport } from './routes/authenticate-success'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicSpaceSpaceIdRouteImport } from './routes/public-space/$space-id'
import { Route as PrivateSpaceSpaceIdRouteImport } from './routes/private-space/$space-id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticateSuccessRoute = AuthenticateSuccessRouteImport.update({
  id: '/authenticate-success',
  path: '/authenticate-success',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicSpaceSpaceIdRoute = PublicSpaceSpaceIdRouteImport.update({
  id: '/public-space/$space-id',
  path: '/public-space/$space-id',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateSpaceSpaceIdRoute = PrivateSpaceSpaceIdRouteImport.update({
  id: '/private-space/$space-id',
  path: '/private-space/$space-id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/authenticate-success': typeof AuthenticateSuccessRoute
  '/login': typeof LoginRoute
  '/private-space/$space-id': typeof PrivateSpaceSpaceIdRoute
  '/public-space/$space-id': typeof PublicSpaceSpaceIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/authenticate-success': typeof AuthenticateSuccessRoute
  '/login': typeof LoginRoute
  '/private-space/$space-id': typeof PrivateSpaceSpaceIdRoute
  '/public-space/$space-id': typeof PublicSpaceSpaceIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/authenticate-success': typeof AuthenticateSuccessRoute
  '/login': typeof LoginRoute
  '/private-space/$space-id': typeof PrivateSpaceSpaceIdRoute
  '/public-space/$space-id': typeof PublicSpaceSpaceIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/authenticate-success'
    | '/login'
    | '/private-space/$space-id'
    | '/public-space/$space-id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/authenticate-success'
    | '/login'
    | '/private-space/$space-id'
    | '/public-space/$space-id'
  id:
    | '__root__'
    | '/'
    | '/authenticate-success'
    | '/login'
    | '/private-space/$space-id'
    | '/public-space/$space-id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticateSuccessRoute: typeof AuthenticateSuccessRoute
  LoginRoute: typeof LoginRoute
  PrivateSpaceSpaceIdRoute: typeof PrivateSpaceSpaceIdRoute
  PublicSpaceSpaceIdRoute: typeof PublicSpaceSpaceIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authenticate-success': {
      id: '/authenticate-success'
      path: '/authenticate-success'
      fullPath: '/authenticate-success'
      preLoaderRoute: typeof AuthenticateSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/public-space/$space-id': {
      id: '/public-space/$space-id'
      path: '/public-space/$space-id'
      fullPath: '/public-space/$space-id'
      preLoaderRoute: typeof PublicSpaceSpaceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/private-space/$space-id': {
      id: '/private-space/$space-id'
      path: '/private-space/$space-id'
      fullPath: '/private-space/$space-id'
      preLoaderRoute: typeof PrivateSpaceSpaceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticateSuccessRoute: AuthenticateSuccessRoute,
  LoginRoute: LoginRoute,
  PrivateSpaceSpaceIdRoute: PrivateSpaceSpaceIdRoute,
  PublicSpaceSpaceIdRoute: PublicSpaceSpaceIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
